buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
    }
}

apply plugin: 'docker-compose'

allprojects {
    group = "net.chrisrichardson.eventstore.javacustomersandorders"
}

subprojects {
    apply plugin: 'java-library'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()

        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
        mavenLocal()
    }

    dependencies {
        implementation(platform("io.eventuate.platform:eventuate-platform-dependencies:$eventuatePlatformVersion"))
    }
}

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION", eventuateMessagingKafkaImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
    environment.put "EVENTUATE_JAVA_BASE_IMAGE_VERSION", eventuateExamplesBaseImageVersion

    mysqlbinlogOnly {
        projectName = null
        startedServices = [ 'mysql']
        useComposeFiles = ["docker-compose-eventuate-local-mysql.yml"]
    }

    mysqlbinlog {
        projectName = null
        useComposeFiles = ["docker-compose-eventuate-local-mysql.yml"]
    }

    mysqlbinlogcdc {
        projectName = null
        useComposeFiles = ["docker-compose-eventuate-local-mysql.yml"]
        startedServices = ["cdcservice"]
    }

    postgrespollingOnly {
        projectName = null
        startedServices = [ 'postgres']
        useComposeFiles = ["docker-compose-eventuate-local-postgres-polling.yml"]
    }

    postgrespolling {
        projectName = null
        useComposeFiles = ["docker-compose-eventuate-local-postgres-polling.yml"]
    }

    postgrespollingcdc {
        projectName = null
        useComposeFiles = ["docker-compose-eventuate-local-postgres-polling.yml"]
        startedServices = ["cdcservice"]
    }

    postgreswalOnly {
        projectName = null
        startedServices = [ 'postgres']
        useComposeFiles = ["docker-compose-eventuate-local-postgres-wal.yml"]
    }

    postgreswal {
        projectName = null
        useComposeFiles = ["docker-compose-eventuate-local-postgres-wal.yml"]
    }

    postgreswalcdc {
        projectName = null
        useComposeFiles = ["docker-compose-eventuate-local-postgres-wal.yml"]
        startedServices = ["cdcservice"]
    }
}


mysqlbinlogComposeUp.dependsOn(mysqlbinlogComposeBuild)
mysqlbinlogComposeUp.dependsOn(mysqlbinlogOnlyComposeUp)

postgrespollingComposeUp.dependsOn(postgrespollingComposeBuild)
postgrespollingComposeUp.dependsOn(postgrespollingOnlyComposeUp)

postgreswalComposeUp.dependsOn(postgreswalComposeBuild)
postgreswalComposeUp.dependsOn(postgreswalOnlyComposeUp)
