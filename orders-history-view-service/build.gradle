plugins {
    id "io.spring.dependency-management"
    id "java"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "application"
}

apply plugin: 'docker-compose'

dockerCompose.isRequiredBy(test)

dockerCompose {
    useComposeFiles = ['docker-compose-integration-tests.yml']
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
    }
}

dependencies {
    api project(":orders-history-common")

    api "io.eventuate.local.java:eventuate-client-java-micronaut-events"
    api "io.eventuate.local.java:eventuate-local-java-micronaut-events"

    implementation("io.micronaut.mongodb:micronaut-mongo-sync")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    api "io.micronaut:micronaut-inject"
    api "io.micronaut:micronaut-validation"
    api "io.micronaut:micronaut-runtime"
    api "io.micronaut:micronaut-http-server-netty"
    api 'io.micronaut:micronaut-management'
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"
    api "io.swagger.core.v3:swagger-annotations"
    api "io.eventuate.util:eventuate-util-swagger-ui:$eventuateUtilVersion"

    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation project(":customers-common")
    testImplementation "junit:junit:4.12"
    testImplementation 'com.jayway.restassured:rest-assured:2.3.0'
    testImplementation "com.jayway.jsonpath:json-path:2.3.0"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

mainClassName = "net.chrisrichardson.eventstore.examples.customersandorders.ordershistoryviewservice.OrderHistoryQuerySideService"

shadowJar {
    mergeServiceFiles()
}

// use JUnit 5 platform
test {
    useJUnitPlatform()
}
