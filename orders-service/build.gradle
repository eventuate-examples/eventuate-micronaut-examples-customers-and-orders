plugins {
    id "io.spring.dependency-management"
    id "java"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "application"
}

apply plugin: 'docker-compose'

dockerCompose.isRequiredBy(test)

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION", eventuateMessagingKafkaImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
    environment.put "EVENTUATE_JAVA_BASE_IMAGE_VERSION", eventuateExamplesBaseImageVersion

    if ("EventuatePolling".equals(System.getenv("SPRING_PROFILES_ACTIVE")))
        useComposeFiles = ['../docker-compose-eventuate-local-postgres-polling.yml']
    else if ("PostgresWal".equals(System.getenv("SPRING_PROFILES_ACTIVE")))
        useComposeFiles = ['../docker-compose-eventuate-local-postgres-wal.yml']
    else
        useComposeFiles = ['../docker-compose-eventuate-local-mysql.yml']
    startedServices=["customercommandside"]
    projectName = null

}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
    }
}

dependencies {
    compile project(":orders-common")
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"

    compile "io.eventuate.local.java:eventuate-client-java-micronaut"
    compile "io.eventuate.local.java:eventuate-local-java-micronaut-jdbc"
    compile "io.eventuate.common:eventuate-common-micronaut-data-jdbc:$eventuateCommonVersion"

    annotationProcessor "javax.persistence:javax.persistence-api:2.2"
    compile 'io.micronaut.sql:micronaut-jdbc-hikari'
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-http-server-netty"
    compile 'io.micronaut:micronaut-management'
    runtime "ch.qos.logback:logback-classic:1.2.3"
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"
    compile "io.swagger.core.v3:swagger-annotations"
    compile "io.eventuate.util:eventuate-util-swagger-ui:$eventuateUtilVersion"

    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile "io.eventuate.local.java:eventuate-client-java-micronaut-jdbc"
    testCompile project(":customers-common")
    testCompile "junit:junit:4.12"
    testCompile 'com.jayway.restassured:rest-assured:2.3.0'
    testCompile "com.jayway.jsonpath:json-path:2.3.0"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
}

mainClassName = "net.chrisrichardson.eventstore.examples.customersandorders.ordersservice.OrdersServiceMain"

shadowJar {
    mergeServiceFiles()
}

// use JUnit 5 platform
test {
    useJUnitPlatform()
}
